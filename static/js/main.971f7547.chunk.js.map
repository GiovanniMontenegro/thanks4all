{"version":3,"sources":["components/readyfordeparture/index.tsx","components/freemenow/index.tsx","serviceWorker.ts","index.tsx","container/app/App.tsx"],"names":["ReadyForDeparture","props","rocketOptions","loop","autoplay","animationData","get","rocketAnimation","rendererSettings","preserveAspectRatio","id","className","rocketEngineStatus","options","isClickToPauseDisabled","height","width","onAnimationEnd","onEndTypingsAnimation","cursor","hideWhenDone","hideWhenDoneDelay","onTypingDone","changeRocketEngineStatus","Delay","ms","Backspace","count","delay","style","fontSize","FreeMeNow","heart_colored","heart1","heart_boomed","heart2","happy_dancing","happyDancing","heart","showHeart","HeartAttack","isStopped","isAnimationStopped","eventListeners","eventName","callback","onSwitchHeart","Boolean","window","location","hostname","match","ReactDOM","render","React","hideBody","appState","setAppState","engineStatus","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.971f7547.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Lottie from 'react-lottie';\r\nimport * as rocketAnimation from '../../static/7885-codey-riding-a-rocket.json';\r\nimport { get } from 'lodash';\r\nimport Typist from 'react-typist';\r\nimport { EngineStatus } from '../../container/app/App.js';\r\nimport './style.css';\r\n\r\n\r\ntype RFDProps = {\r\n    rocketEngineStatus: EngineStatus;\r\n    changeRocketEngineStatus: (engineStatus: EngineStatus) => void\r\n    onEndTypingsAnimation: () => void\r\n}\r\n\r\nconst ReadyForDeparture: React.SFC<RFDProps> = (props: RFDProps): JSX.Element => {\r\n\r\n\r\n\r\n    const getRocketAnimation = () => {\r\n        if (props.rocketEngineStatus === \"flying\") {\r\n            return \"rocket-animation-in\";\r\n        } else if (props.rocketEngineStatus === \"readyForDeparture\") {\r\n            return \"rocket-animation-out\";\r\n        }\r\n        return \"rocket-animation-vibrate\";\r\n    }\r\n\r\n    const getTypingsAnimation = () => {\r\n        if (props.rocketEngineStatus === \"readyForDeparture\") {\r\n            return \"typings-container-out\";\r\n        }\r\n        return \"typings-container-in\"\r\n    }\r\n\r\n\r\n    const rocketOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: get(rocketAnimation, \"default\"),\r\n        rendererSettings: {\r\n            preserveAspectRatio: 'xMidYMid meet'\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div id=\"greetings-container\">\r\n            <div id=\"rocket\" className={getRocketAnimation()}>\r\n                <Lottie options={rocketOptions}\r\n                    isClickToPauseDisabled={true}\r\n                    height={'40vh'}\r\n                    width={'35%'}\r\n                />\r\n            </div>\r\n            <div onAnimationEnd={() => { props.onEndTypingsAnimation() }} className={getTypingsAnimation()}>\r\n                <div id=\"title-typings\" >\r\n                    <Typist cursor={{ hideWhenDone: true, hideWhenDoneDelay: 0 }} onTypingDone={() => props.changeRocketEngineStatus(\"intoTheSky\")}>\r\n                        <span> THANKS EVERYONE </span>\r\n                    </Typist>\r\n                </div>\r\n                <div id=\"subtitle-typings\">\r\n                    <Typist onTypingDone={() => props.changeRocketEngineStatus(\"readyForDeparture\")}>\r\n                        <Typist.Delay ms={2000} />\r\n                        <span>For helping me in bad moments</span>\r\n                        <Typist.Backspace count={25} delay={500} />\r\n                        <span>making me smile when I need most </span>\r\n                        <Typist.Backspace count={37} delay={500} />\r\n                        <span style={{ fontSize: 64 }}>Because without you</span>\r\n                        <br />\r\n                        <span style={{ fontSize: 64 }}>It wouldn't be the same</span>\r\n                        <Typist.Delay ms={500} />\r\n                    </Typist>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ReadyForDeparture\r\n\r\n","import * as React from 'react'\r\nimport Lottie from 'react-lottie'\r\nimport * as heart1 from '../../static/322-favorite.json';\r\nimport * as heart2 from '../../static/67-exploding-heart.json';\r\nimport * as happyDancing from '../../static/12049-vik4graphic-no-bg.json';\r\nimport { get } from 'lodash';\r\nimport Typist from 'react-typist';\r\nimport { HeartStatus } from '../../container/app/App';\r\nimport './style.css';\r\n\r\ntype Unchained = {\r\n    isAnimationStopped: boolean\r\n    showHeart: HeartStatus\r\n    onSwitchHeart: (heart: HeartStatus) => void\r\n}\r\n\r\nconst FreeMeNow: React.SFC<Unchained> = (props: Unchained) => {\r\n\r\n    const heart_colored = {\r\n        loop: false,\r\n        autoplay: true,\r\n        animationData: get(heart1, \"default\"),\r\n        rendererSettings: {\r\n            preserveAspectRatio: 'xMidYMid meet'\r\n        }\r\n    };\r\n\r\n    const heart_boomed = {\r\n        loop: false,\r\n        autoplay: true,\r\n        animationData: get(heart2, \"default\"),\r\n        rendererSettings: {\r\n            preserveAspectRatio: 'xMidYMid meet'\r\n        }\r\n    };\r\n\r\n    const happy_dancing = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: get(happyDancing, \"default\"),\r\n        rendererSettings: {\r\n            preserveAspectRatio: 'xMidYMid meet'\r\n        }\r\n    }\r\n    const heart = props.showHeart === \"colored\" ? heart_colored : heart_boomed;\r\n\r\n    const HeartAttack = <div><Lottie options={heart}\r\n        height={'100vh'}\r\n        width={'100%'}\r\n        isClickToPauseDisabled={true}\r\n        isStopped={props.isAnimationStopped}\r\n        eventListeners={[\r\n            {\r\n                eventName: 'complete',\r\n                callback: () => {\r\n                    props.onSwitchHeart(\"boomed\")\r\n                },\r\n            },\r\n        ]}\r\n    /></div>;\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!props.isAnimationStopped ?\r\n                HeartAttack :\r\n                (\r\n                    <div className={\"ending-container\"}>\r\n                        <Typist className=\"title-typings\" cursor={{ hideWhenDone: true, hideWhenDoneDelay: 0 }}>\r\n                            <span> Thanks 4 All </span>\r\n                        </Typist>\r\n                        <Lottie options={happy_dancing}\r\n                            height={'80vh'}\r\n                            width={'100%'}\r\n                            isClickToPauseDisabled={true}\r\n                        />\r\n                    </div>\r\n                )}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default FreeMeNow;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './container/app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as React from 'react';\r\nimport './styles/index.css';\r\nimport ReadyForDeparture from '../../components/readyfordeparture';\r\nimport FreeMeNow from '../../components/freemenow';\r\n\r\nexport type EngineStatus = \"flying\" | \"readyForDeparture\" | \"intoTheSky\";\r\n\r\nexport type HeartStatus = \"colored\" | \"boomed\"\r\n\r\ntype AppState = {\r\n  rocketEngineStatus: EngineStatus;\r\n  hideBody: boolean;\r\n  showHeart: HeartStatus;\r\n  isAnimationStopped: boolean;\r\n}\r\n\r\n/*\r\n* The truth is that people don't leave bad jobs, but bad bosses.\r\n*/\r\n\r\nexport const App: React.FC = () => {\r\n\r\n  const [appState, setAppState] = React.useState<AppState>({ rocketEngineStatus: \"flying\", hideBody: false, showHeart: \"colored\", isAnimationStopped: false })\r\n\r\n  const getContainerAnimation = () => {\r\n    if (appState.rocketEngineStatus === \"readyForDeparture\") {\r\n      return \"container-out\";\r\n    }\r\n    return \"container-in\"\r\n  }\r\n\r\n  const onEndTypingsAnimation = () => {\r\n    setAppState({ ...appState, hideBody: true })\r\n  }\r\n\r\n  const onSwitchHeart = (heart: HeartStatus) => {\r\n    if (appState.showHeart === \"boomed\") {\r\n      setAppState({ ...appState, isAnimationStopped: true })\r\n    } else {\r\n      setAppState({ ...appState, showHeart: heart })\r\n    }\r\n  }\r\n\r\n  const changeRocketEngineStatus = (engineStatus: EngineStatus) => {\r\n    setAppState({ ...appState, rocketEngineStatus: engineStatus })\r\n  }\r\n\r\n  return (\r\n    <div id=\"container\" className={getContainerAnimation()}>\r\n      {!appState.hideBody ? (\r\n        <ReadyForDeparture rocketEngineStatus={appState.rocketEngineStatus} changeRocketEngineStatus={changeRocketEngineStatus} onEndTypingsAnimation={onEndTypingsAnimation} />) : (\r\n          <FreeMeNow isAnimationStopped={appState.isAnimationStopped} showHeart={appState.showHeart} onSwitchHeart={onSwitchHeart} />)}\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"sourceRoot":""}